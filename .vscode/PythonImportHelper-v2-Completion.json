[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "nltk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nltk",
        "description": "nltk",
        "detail": "nltk",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "word_tokenize",
        "importPath": "nltk.tokenize",
        "description": "nltk.tokenize",
        "isExtraImport": true,
        "detail": "nltk.tokenize",
        "documentation": {}
    },
    {
        "label": "stopwords",
        "importPath": "nltk.corpus",
        "description": "nltk.corpus",
        "isExtraImport": true,
        "detail": "nltk.corpus",
        "documentation": {}
    },
    {
        "label": "WordNetLemmatizer",
        "importPath": "nltk.stem",
        "description": "nltk.stem",
        "isExtraImport": true,
        "detail": "nltk.stem",
        "documentation": {}
    },
    {
        "label": "finders",
        "importPath": "django.contrib.staticfiles",
        "description": "django.contrib.staticfiles",
        "isExtraImport": true,
        "detail": "django.contrib.staticfiles",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "setuptools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "setuptools",
        "description": "setuptools",
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "A2SL.asgi",
        "description": "A2SL.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "A2SL.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "A2SL.settings",
        "description": "A2SL.settings",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nimport nltk\nNLTK_DATA_DIR = os.path.join(BASE_DIR, 'nltk_data')\nnltk.data.path.append(NLTK_DATA_DIR)\n# download nltk utilities\nnltk.download('averaged_perceptron_tagger')\nnltk.download('wordnet')\nnltk.download('omw-1.4')\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/",
        "detail": "A2SL.settings",
        "documentation": {}
    },
    {
        "label": "NLTK_DATA_DIR",
        "kind": 5,
        "importPath": "A2SL.settings",
        "description": "A2SL.settings",
        "peekOfCode": "NLTK_DATA_DIR = os.path.join(BASE_DIR, 'nltk_data')\nnltk.data.path.append(NLTK_DATA_DIR)\n# download nltk utilities\nnltk.download('averaged_perceptron_tagger')\nnltk.download('wordnet')\nnltk.download('omw-1.4')\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = '3k7=!d39#4@_&5a6to&4=_=j(c^v0(vv91cj5+9e8+d4&+01jb'",
        "detail": "A2SL.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "A2SL.settings",
        "description": "A2SL.settings",
        "peekOfCode": "SECRET_KEY = '3k7=!d39#4@_&5a6to&4=_=j(c^v0(vv91cj5+9e8+d4&+01jb'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "A2SL.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "A2SL.settings",
        "description": "A2SL.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "A2SL.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "A2SL.settings",
        "description": "A2SL.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]",
        "detail": "A2SL.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "A2SL.settings",
        "description": "A2SL.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',",
        "detail": "A2SL.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "A2SL.settings",
        "description": "A2SL.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'A2SL.urls'",
        "detail": "A2SL.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "A2SL.settings",
        "description": "A2SL.settings",
        "peekOfCode": "ROOT_URLCONF = 'A2SL.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': ['templates',],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "A2SL.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "A2SL.settings",
        "description": "A2SL.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': ['templates',],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "A2SL.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "A2SL.settings",
        "description": "A2SL.settings",
        "peekOfCode": "WSGI_APPLICATION = 'A2SL.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n# Password validation",
        "detail": "A2SL.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "A2SL.settings",
        "description": "A2SL.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "A2SL.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "A2SL.settings",
        "description": "A2SL.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "A2SL.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "A2SL.settings",
        "description": "A2SL.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [    \n    os.path.join(BASE_DIR,\"assets\"),",
        "detail": "A2SL.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "A2SL.settings",
        "description": "A2SL.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [    \n    os.path.join(BASE_DIR,\"assets\"),\n]",
        "detail": "A2SL.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "A2SL.settings",
        "description": "A2SL.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [    \n    os.path.join(BASE_DIR,\"assets\"),\n]",
        "detail": "A2SL.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "A2SL.settings",
        "description": "A2SL.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [    \n    os.path.join(BASE_DIR,\"assets\"),\n]",
        "detail": "A2SL.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "A2SL.settings",
        "description": "A2SL.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [    \n    os.path.join(BASE_DIR,\"assets\"),\n]",
        "detail": "A2SL.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "A2SL.settings",
        "description": "A2SL.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATICFILES_DIRS = [    \n    os.path.join(BASE_DIR,\"assets\"),\n]",
        "detail": "A2SL.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "A2SL.settings",
        "description": "A2SL.settings",
        "peekOfCode": "STATICFILES_DIRS = [    \n    os.path.join(BASE_DIR,\"assets\"),\n]",
        "detail": "A2SL.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "A2SL.urls",
        "description": "A2SL.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('about/',views.about_view,name='about'),\n    path('contact/',views.contact_view,name='contact'),\n    path('login/',views.login_view,name='login'),\n    path('logout/',views.logout_view,name='logout'),\n    path('signup/',views.signup_view,name='signup'),\n    path('animation/',views.animation_view,name='animation'),\n    path('',views.home_view,name='home'),\n    path('animation/',views.animation_view,name='animation')",
        "detail": "A2SL.urls",
        "documentation": {}
    },
    {
        "label": "home_view",
        "kind": 2,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "def home_view(request):\n\treturn render(request,'home.html')\ndef about_view(request):\n\treturn render(request,'about.html')\ndef contact_view(request):\n\treturn render(request,'contact.html')\n@login_required(login_url=\"login\")\ndef animation_view(request):\n\tif request.method == 'POST':\n\t\ttext = request.POST.get('sen')",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "about_view",
        "kind": 2,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "def about_view(request):\n\treturn render(request,'about.html')\ndef contact_view(request):\n\treturn render(request,'contact.html')\n@login_required(login_url=\"login\")\ndef animation_view(request):\n\tif request.method == 'POST':\n\t\ttext = request.POST.get('sen')\n\t\t#tokenizing the sentence\n\t\ttext.lower()",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "contact_view",
        "kind": 2,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "def contact_view(request):\n\treturn render(request,'contact.html')\n@login_required(login_url=\"login\")\ndef animation_view(request):\n\tif request.method == 'POST':\n\t\ttext = request.POST.get('sen')\n\t\t#tokenizing the sentence\n\t\ttext.lower()\n\t\t#tokenizing the sentence\n\t\twords = word_tokenize(text)",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "animation_view",
        "kind": 2,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "def animation_view(request):\n\tif request.method == 'POST':\n\t\ttext = request.POST.get('sen')\n\t\t#tokenizing the sentence\n\t\ttext.lower()\n\t\t#tokenizing the sentence\n\t\twords = word_tokenize(text)\n\t\ttagged = nltk.pos_tag(words)\n\t\ttense = {}\n\t\ttense[\"future\"] = len([word for word in tagged if word[1] == \"MD\"])",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "signup_view",
        "kind": 2,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "def signup_view(request):\n\tif request.method == 'POST':\n\t\tform = UserCreationForm(request.POST)\n\t\tif form.is_valid():\n\t\t\tuser = form.save()\n\t\t\tlogin(request,user)\n\t\t\t# log the user in\n\t\t\treturn redirect('animation')\n\telse:\n\t\tform = UserCreationForm()",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "login_view",
        "kind": 2,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "def login_view(request):\n\tif request.method == 'POST':\n\t\tform = AuthenticationForm(data=request.POST)\n\t\tif form.is_valid():\n\t\t\t#log in user\n\t\t\tuser = form.get_user()\n\t\t\tlogin(request,user)\n\t\t\tif 'next' in request.POST:\n\t\t\t\treturn redirect(request.POST.get('next'))\n\t\t\telse:",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "logout_view",
        "kind": 2,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "def logout_view(request):\n\tlogout(request)\n\treturn redirect(\"home\")",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\ttext",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\ttext = request.POST.get('sen')\n\t\t#tokenizing the sentence\n\t\ttext.lower()\n\t\t#tokenizing the sentence\n\t\twords = word_tokenize(text)\n\t\ttagged = nltk.pos_tag(words)\n\t\ttense = {}\n\t\ttense[\"future\"] = len([word for word in tagged if word[1] == \"MD\"])\n\t\ttense[\"present\"] = len([word for word in tagged if word[1] in [\"VBP\", \"VBZ\",\"VBG\"]])\n\t\ttense[\"past\"] = len([word for word in tagged if word[1] in [\"VBD\", \"VBN\"]])",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\twords",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\twords = word_tokenize(text)\n\t\ttagged = nltk.pos_tag(words)\n\t\ttense = {}\n\t\ttense[\"future\"] = len([word for word in tagged if word[1] == \"MD\"])\n\t\ttense[\"present\"] = len([word for word in tagged if word[1] in [\"VBP\", \"VBZ\",\"VBG\"]])\n\t\ttense[\"past\"] = len([word for word in tagged if word[1] in [\"VBD\", \"VBN\"]])\n\t\ttense[\"present_continuous\"] = len([word for word in tagged if word[1] in [\"VBG\"]])\n\t\t#stopwords that will be removed\n\t\tstop_words = set([\"mightn't\", 're', 'wasn', 'wouldn', 'be', 'has', 'that', 'does', 'shouldn', 'do', \"you've\",'off', 'for', \"didn't\", 'm', 'ain', 'haven', \"weren't\", 'are', \"she's\", \"wasn't\", 'its', \"haven't\", \"wouldn't\", 'don', 'weren', 's', \"you'd\", \"don't\", 'doesn', \"hadn't\", 'is', 'was', \"that'll\", \"should've\", 'a', 'then', 'the', 'mustn', 'i', 'nor', 'as', \"it's\", \"needn't\", 'd', 'am', 'have',  'hasn', 'o', \"aren't\", \"you'll\", \"couldn't\", \"you're\", \"mustn't\", 'didn', \"doesn't\", 'll', 'an', 'hadn', 'whom', 'y', \"hasn't\", 'itself', 'couldn', 'needn', \"shan't\", 'isn', 'been', 'such', 'shan', \"shouldn't\", 'aren', 'being', 'were', 'did', 'ma', 't', 'having', 'mightn', 've', \"isn't\", \"won't\"])\n\t\t#removing stopwords and applying lemmatizing nlp process to words",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\ttagged",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\ttagged = nltk.pos_tag(words)\n\t\ttense = {}\n\t\ttense[\"future\"] = len([word for word in tagged if word[1] == \"MD\"])\n\t\ttense[\"present\"] = len([word for word in tagged if word[1] in [\"VBP\", \"VBZ\",\"VBG\"]])\n\t\ttense[\"past\"] = len([word for word in tagged if word[1] in [\"VBD\", \"VBN\"]])\n\t\ttense[\"present_continuous\"] = len([word for word in tagged if word[1] in [\"VBG\"]])\n\t\t#stopwords that will be removed\n\t\tstop_words = set([\"mightn't\", 're', 'wasn', 'wouldn', 'be', 'has', 'that', 'does', 'shouldn', 'do', \"you've\",'off', 'for', \"didn't\", 'm', 'ain', 'haven', \"weren't\", 'are', \"she's\", \"wasn't\", 'its', \"haven't\", \"wouldn't\", 'don', 'weren', 's', \"you'd\", \"don't\", 'doesn', \"hadn't\", 'is', 'was', \"that'll\", \"should've\", 'a', 'then', 'the', 'mustn', 'i', 'nor', 'as', \"it's\", \"needn't\", 'd', 'am', 'have',  'hasn', 'o', \"aren't\", \"you'll\", \"couldn't\", \"you're\", \"mustn't\", 'didn', \"doesn't\", 'll', 'an', 'hadn', 'whom', 'y', \"hasn't\", 'itself', 'couldn', 'needn', \"shan't\", 'isn', 'been', 'such', 'shan', \"shouldn't\", 'aren', 'being', 'were', 'did', 'ma', 't', 'having', 'mightn', 've', \"isn't\", \"won't\"])\n\t\t#removing stopwords and applying lemmatizing nlp process to words\n\t\tlr = WordNetLemmatizer()",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\ttense",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\ttense = {}\n\t\ttense[\"future\"] = len([word for word in tagged if word[1] == \"MD\"])\n\t\ttense[\"present\"] = len([word for word in tagged if word[1] in [\"VBP\", \"VBZ\",\"VBG\"]])\n\t\ttense[\"past\"] = len([word for word in tagged if word[1] in [\"VBD\", \"VBN\"]])\n\t\ttense[\"present_continuous\"] = len([word for word in tagged if word[1] in [\"VBG\"]])\n\t\t#stopwords that will be removed\n\t\tstop_words = set([\"mightn't\", 're', 'wasn', 'wouldn', 'be', 'has', 'that', 'does', 'shouldn', 'do', \"you've\",'off', 'for', \"didn't\", 'm', 'ain', 'haven', \"weren't\", 'are', \"she's\", \"wasn't\", 'its', \"haven't\", \"wouldn't\", 'don', 'weren', 's', \"you'd\", \"don't\", 'doesn', \"hadn't\", 'is', 'was', \"that'll\", \"should've\", 'a', 'then', 'the', 'mustn', 'i', 'nor', 'as', \"it's\", \"needn't\", 'd', 'am', 'have',  'hasn', 'o', \"aren't\", \"you'll\", \"couldn't\", \"you're\", \"mustn't\", 'didn', \"doesn't\", 'll', 'an', 'hadn', 'whom', 'y', \"hasn't\", 'itself', 'couldn', 'needn', \"shan't\", 'isn', 'been', 'such', 'shan', \"shouldn't\", 'aren', 'being', 'were', 'did', 'ma', 't', 'having', 'mightn', 've', \"isn't\", \"won't\"])\n\t\t#removing stopwords and applying lemmatizing nlp process to words\n\t\tlr = WordNetLemmatizer()\n\t\tfiltered_text = []",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\ttense[\"future\"]",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\ttense[\"future\"] = len([word for word in tagged if word[1] == \"MD\"])\n\t\ttense[\"present\"] = len([word for word in tagged if word[1] in [\"VBP\", \"VBZ\",\"VBG\"]])\n\t\ttense[\"past\"] = len([word for word in tagged if word[1] in [\"VBD\", \"VBN\"]])\n\t\ttense[\"present_continuous\"] = len([word for word in tagged if word[1] in [\"VBG\"]])\n\t\t#stopwords that will be removed\n\t\tstop_words = set([\"mightn't\", 're', 'wasn', 'wouldn', 'be', 'has', 'that', 'does', 'shouldn', 'do', \"you've\",'off', 'for', \"didn't\", 'm', 'ain', 'haven', \"weren't\", 'are', \"she's\", \"wasn't\", 'its', \"haven't\", \"wouldn't\", 'don', 'weren', 's', \"you'd\", \"don't\", 'doesn', \"hadn't\", 'is', 'was', \"that'll\", \"should've\", 'a', 'then', 'the', 'mustn', 'i', 'nor', 'as', \"it's\", \"needn't\", 'd', 'am', 'have',  'hasn', 'o', \"aren't\", \"you'll\", \"couldn't\", \"you're\", \"mustn't\", 'didn', \"doesn't\", 'll', 'an', 'hadn', 'whom', 'y', \"hasn't\", 'itself', 'couldn', 'needn', \"shan't\", 'isn', 'been', 'such', 'shan', \"shouldn't\", 'aren', 'being', 'were', 'did', 'ma', 't', 'having', 'mightn', 've', \"isn't\", \"won't\"])\n\t\t#removing stopwords and applying lemmatizing nlp process to words\n\t\tlr = WordNetLemmatizer()\n\t\tfiltered_text = []\n\t\tfor w,p in zip(words,tagged):",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\ttense[\"present\"]",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\ttense[\"present\"] = len([word for word in tagged if word[1] in [\"VBP\", \"VBZ\",\"VBG\"]])\n\t\ttense[\"past\"] = len([word for word in tagged if word[1] in [\"VBD\", \"VBN\"]])\n\t\ttense[\"present_continuous\"] = len([word for word in tagged if word[1] in [\"VBG\"]])\n\t\t#stopwords that will be removed\n\t\tstop_words = set([\"mightn't\", 're', 'wasn', 'wouldn', 'be', 'has', 'that', 'does', 'shouldn', 'do', \"you've\",'off', 'for', \"didn't\", 'm', 'ain', 'haven', \"weren't\", 'are', \"she's\", \"wasn't\", 'its', \"haven't\", \"wouldn't\", 'don', 'weren', 's', \"you'd\", \"don't\", 'doesn', \"hadn't\", 'is', 'was', \"that'll\", \"should've\", 'a', 'then', 'the', 'mustn', 'i', 'nor', 'as', \"it's\", \"needn't\", 'd', 'am', 'have',  'hasn', 'o', \"aren't\", \"you'll\", \"couldn't\", \"you're\", \"mustn't\", 'didn', \"doesn't\", 'll', 'an', 'hadn', 'whom', 'y', \"hasn't\", 'itself', 'couldn', 'needn', \"shan't\", 'isn', 'been', 'such', 'shan', \"shouldn't\", 'aren', 'being', 'were', 'did', 'ma', 't', 'having', 'mightn', 've', \"isn't\", \"won't\"])\n\t\t#removing stopwords and applying lemmatizing nlp process to words\n\t\tlr = WordNetLemmatizer()\n\t\tfiltered_text = []\n\t\tfor w,p in zip(words,tagged):\n\t\t\tif w not in stop_words:",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\ttense[\"past\"]",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\ttense[\"past\"] = len([word for word in tagged if word[1] in [\"VBD\", \"VBN\"]])\n\t\ttense[\"present_continuous\"] = len([word for word in tagged if word[1] in [\"VBG\"]])\n\t\t#stopwords that will be removed\n\t\tstop_words = set([\"mightn't\", 're', 'wasn', 'wouldn', 'be', 'has', 'that', 'does', 'shouldn', 'do', \"you've\",'off', 'for', \"didn't\", 'm', 'ain', 'haven', \"weren't\", 'are', \"she's\", \"wasn't\", 'its', \"haven't\", \"wouldn't\", 'don', 'weren', 's', \"you'd\", \"don't\", 'doesn', \"hadn't\", 'is', 'was', \"that'll\", \"should've\", 'a', 'then', 'the', 'mustn', 'i', 'nor', 'as', \"it's\", \"needn't\", 'd', 'am', 'have',  'hasn', 'o', \"aren't\", \"you'll\", \"couldn't\", \"you're\", \"mustn't\", 'didn', \"doesn't\", 'll', 'an', 'hadn', 'whom', 'y', \"hasn't\", 'itself', 'couldn', 'needn', \"shan't\", 'isn', 'been', 'such', 'shan', \"shouldn't\", 'aren', 'being', 'were', 'did', 'ma', 't', 'having', 'mightn', 've', \"isn't\", \"won't\"])\n\t\t#removing stopwords and applying lemmatizing nlp process to words\n\t\tlr = WordNetLemmatizer()\n\t\tfiltered_text = []\n\t\tfor w,p in zip(words,tagged):\n\t\t\tif w not in stop_words:\n\t\t\t\tif p[1]=='VBG' or p[1]=='VBD' or p[1]=='VBZ' or p[1]=='VBN' or p[1]=='NN':",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\ttense[\"present_continuous\"]",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\ttense[\"present_continuous\"] = len([word for word in tagged if word[1] in [\"VBG\"]])\n\t\t#stopwords that will be removed\n\t\tstop_words = set([\"mightn't\", 're', 'wasn', 'wouldn', 'be', 'has', 'that', 'does', 'shouldn', 'do', \"you've\",'off', 'for', \"didn't\", 'm', 'ain', 'haven', \"weren't\", 'are', \"she's\", \"wasn't\", 'its', \"haven't\", \"wouldn't\", 'don', 'weren', 's', \"you'd\", \"don't\", 'doesn', \"hadn't\", 'is', 'was', \"that'll\", \"should've\", 'a', 'then', 'the', 'mustn', 'i', 'nor', 'as', \"it's\", \"needn't\", 'd', 'am', 'have',  'hasn', 'o', \"aren't\", \"you'll\", \"couldn't\", \"you're\", \"mustn't\", 'didn', \"doesn't\", 'll', 'an', 'hadn', 'whom', 'y', \"hasn't\", 'itself', 'couldn', 'needn', \"shan't\", 'isn', 'been', 'such', 'shan', \"shouldn't\", 'aren', 'being', 'were', 'did', 'ma', 't', 'having', 'mightn', 've', \"isn't\", \"won't\"])\n\t\t#removing stopwords and applying lemmatizing nlp process to words\n\t\tlr = WordNetLemmatizer()\n\t\tfiltered_text = []\n\t\tfor w,p in zip(words,tagged):\n\t\t\tif w not in stop_words:\n\t\t\t\tif p[1]=='VBG' or p[1]=='VBD' or p[1]=='VBZ' or p[1]=='VBN' or p[1]=='NN':\n\t\t\t\t\tfiltered_text.append(lr.lemmatize(w,pos='v'))",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\tstop_words",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\tstop_words = set([\"mightn't\", 're', 'wasn', 'wouldn', 'be', 'has', 'that', 'does', 'shouldn', 'do', \"you've\",'off', 'for', \"didn't\", 'm', 'ain', 'haven', \"weren't\", 'are', \"she's\", \"wasn't\", 'its', \"haven't\", \"wouldn't\", 'don', 'weren', 's', \"you'd\", \"don't\", 'doesn', \"hadn't\", 'is', 'was', \"that'll\", \"should've\", 'a', 'then', 'the', 'mustn', 'i', 'nor', 'as', \"it's\", \"needn't\", 'd', 'am', 'have',  'hasn', 'o', \"aren't\", \"you'll\", \"couldn't\", \"you're\", \"mustn't\", 'didn', \"doesn't\", 'll', 'an', 'hadn', 'whom', 'y', \"hasn't\", 'itself', 'couldn', 'needn', \"shan't\", 'isn', 'been', 'such', 'shan', \"shouldn't\", 'aren', 'being', 'were', 'did', 'ma', 't', 'having', 'mightn', 've', \"isn't\", \"won't\"])\n\t\t#removing stopwords and applying lemmatizing nlp process to words\n\t\tlr = WordNetLemmatizer()\n\t\tfiltered_text = []\n\t\tfor w,p in zip(words,tagged):\n\t\t\tif w not in stop_words:\n\t\t\t\tif p[1]=='VBG' or p[1]=='VBD' or p[1]=='VBZ' or p[1]=='VBN' or p[1]=='NN':\n\t\t\t\t\tfiltered_text.append(lr.lemmatize(w,pos='v'))\n\t\t\t\telif p[1]=='JJ' or p[1]=='JJR' or p[1]=='JJS'or p[1]=='RBR' or p[1]=='RBS':\n\t\t\t\t\tfiltered_text.append(lr.lemmatize(w,pos='a'))",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\tlr",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\tlr = WordNetLemmatizer()\n\t\tfiltered_text = []\n\t\tfor w,p in zip(words,tagged):\n\t\t\tif w not in stop_words:\n\t\t\t\tif p[1]=='VBG' or p[1]=='VBD' or p[1]=='VBZ' or p[1]=='VBN' or p[1]=='NN':\n\t\t\t\t\tfiltered_text.append(lr.lemmatize(w,pos='v'))\n\t\t\t\telif p[1]=='JJ' or p[1]=='JJR' or p[1]=='JJS'or p[1]=='RBR' or p[1]=='RBS':\n\t\t\t\t\tfiltered_text.append(lr.lemmatize(w,pos='a'))\n\t\t\t\telse:\n\t\t\t\t\tfiltered_text.append(lr.lemmatize(w))",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\tfiltered_text",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\tfiltered_text = []\n\t\tfor w,p in zip(words,tagged):\n\t\t\tif w not in stop_words:\n\t\t\t\tif p[1]=='VBG' or p[1]=='VBD' or p[1]=='VBZ' or p[1]=='VBN' or p[1]=='NN':\n\t\t\t\t\tfiltered_text.append(lr.lemmatize(w,pos='v'))\n\t\t\t\telif p[1]=='JJ' or p[1]=='JJR' or p[1]=='JJS'or p[1]=='RBR' or p[1]=='RBS':\n\t\t\t\t\tfiltered_text.append(lr.lemmatize(w,pos='a'))\n\t\t\t\telse:\n\t\t\t\t\tfiltered_text.append(lr.lemmatize(w))\n\t\t#adding the specific word to specify tense",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\twords",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\twords = filtered_text\n\t\ttemp=[]\n\t\tfor w in words:\n\t\t\tif w=='I':\n\t\t\t\ttemp.append('Me')\n\t\t\telse:\n\t\t\t\ttemp.append(w)\n\t\twords = temp\n\t\tprobable_tense = max(tense,key=tense.get)\n\t\tif probable_tense == \"past\" and tense[\"past\"]>=1:",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\twords",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\twords = temp\n\t\tprobable_tense = max(tense,key=tense.get)\n\t\tif probable_tense == \"past\" and tense[\"past\"]>=1:\n\t\t\ttemp = [\"Before\"]\n\t\t\ttemp = temp + words\n\t\t\twords = temp\n\t\telif probable_tense == \"future\" and tense[\"future\"]>=1:\n\t\t\tif \"Will\" not in words:\n\t\t\t\t\ttemp = [\"Will\"]\n\t\t\t\t\ttemp = temp + words",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\tprobable_tense",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\tprobable_tense = max(tense,key=tense.get)\n\t\tif probable_tense == \"past\" and tense[\"past\"]>=1:\n\t\t\ttemp = [\"Before\"]\n\t\t\ttemp = temp + words\n\t\t\twords = temp\n\t\telif probable_tense == \"future\" and tense[\"future\"]>=1:\n\t\t\tif \"Will\" not in words:\n\t\t\t\t\ttemp = [\"Will\"]\n\t\t\t\t\ttemp = temp + words\n\t\t\t\t\twords = temp",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\t\ttemp",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\t\ttemp = [\"Before\"]\n\t\t\ttemp = temp + words\n\t\t\twords = temp\n\t\telif probable_tense == \"future\" and tense[\"future\"]>=1:\n\t\t\tif \"Will\" not in words:\n\t\t\t\t\ttemp = [\"Will\"]\n\t\t\t\t\ttemp = temp + words\n\t\t\t\t\twords = temp\n\t\t\telse:\n\t\t\t\tpass",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\t\ttemp",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\t\ttemp = temp + words\n\t\t\twords = temp\n\t\telif probable_tense == \"future\" and tense[\"future\"]>=1:\n\t\t\tif \"Will\" not in words:\n\t\t\t\t\ttemp = [\"Will\"]\n\t\t\t\t\ttemp = temp + words\n\t\t\t\t\twords = temp\n\t\t\telse:\n\t\t\t\tpass\n\t\telif probable_tense == \"present\":",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\t\twords",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\t\twords = temp\n\t\telif probable_tense == \"future\" and tense[\"future\"]>=1:\n\t\t\tif \"Will\" not in words:\n\t\t\t\t\ttemp = [\"Will\"]\n\t\t\t\t\ttemp = temp + words\n\t\t\t\t\twords = temp\n\t\t\telse:\n\t\t\t\tpass\n\t\telif probable_tense == \"present\":\n\t\t\tif tense[\"present_continuous\"]>=1:",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\ttemp",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\t\t\t\ttemp = [\"Will\"]\n\t\t\t\t\ttemp = temp + words\n\t\t\t\t\twords = temp\n\t\t\telse:\n\t\t\t\tpass\n\t\telif probable_tense == \"present\":\n\t\t\tif tense[\"present_continuous\"]>=1:\n\t\t\t\ttemp = [\"Now\"]\n\t\t\t\ttemp = temp + words\n\t\t\t\twords = temp",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\ttemp",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\t\t\t\ttemp = temp + words\n\t\t\t\t\twords = temp\n\t\t\telse:\n\t\t\t\tpass\n\t\telif probable_tense == \"present\":\n\t\t\tif tense[\"present_continuous\"]>=1:\n\t\t\t\ttemp = [\"Now\"]\n\t\t\t\ttemp = temp + words\n\t\t\t\twords = temp\n\t\tfiltered_text = []",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\twords",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\t\t\t\twords = temp\n\t\t\telse:\n\t\t\t\tpass\n\t\telif probable_tense == \"present\":\n\t\t\tif tense[\"present_continuous\"]>=1:\n\t\t\t\ttemp = [\"Now\"]\n\t\t\t\ttemp = temp + words\n\t\t\t\twords = temp\n\t\tfiltered_text = []\n\t\tfor w in words:",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\ttemp",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\t\t\ttemp = [\"Now\"]\n\t\t\t\ttemp = temp + words\n\t\t\t\twords = temp\n\t\tfiltered_text = []\n\t\tfor w in words:\n\t\t\tpath = w + \".mp4\"\n\t\t\tf = finders.find(path)\n\t\t\t#splitting the word if its animation is not present in database\n\t\t\tif not f:\n\t\t\t\tfor c in w:",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\ttemp",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\t\t\ttemp = temp + words\n\t\t\t\twords = temp\n\t\tfiltered_text = []\n\t\tfor w in words:\n\t\t\tpath = w + \".mp4\"\n\t\t\tf = finders.find(path)\n\t\t\t#splitting the word if its animation is not present in database\n\t\t\tif not f:\n\t\t\t\tfor c in w:\n\t\t\t\t\tfiltered_text.append(c)",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\twords",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\t\t\twords = temp\n\t\tfiltered_text = []\n\t\tfor w in words:\n\t\t\tpath = w + \".mp4\"\n\t\t\tf = finders.find(path)\n\t\t\t#splitting the word if its animation is not present in database\n\t\t\tif not f:\n\t\t\t\tfor c in w:\n\t\t\t\t\tfiltered_text.append(c)\n\t\t\t#otherwise animation of word",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\tfiltered_text",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\tfiltered_text = []\n\t\tfor w in words:\n\t\t\tpath = w + \".mp4\"\n\t\t\tf = finders.find(path)\n\t\t\t#splitting the word if its animation is not present in database\n\t\t\tif not f:\n\t\t\t\tfor c in w:\n\t\t\t\t\tfiltered_text.append(c)\n\t\t\t#otherwise animation of word\n\t\t\telse:",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tpath",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\t\tpath = w + \".mp4\"\n\t\t\tf = finders.find(path)\n\t\t\t#splitting the word if its animation is not present in database\n\t\t\tif not f:\n\t\t\t\tfor c in w:\n\t\t\t\t\tfiltered_text.append(c)\n\t\t\t#otherwise animation of word\n\t\t\telse:\n\t\t\t\tfiltered_text.append(w)\n\t\twords = filtered_text;",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tf",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\t\tf = finders.find(path)\n\t\t\t#splitting the word if its animation is not present in database\n\t\t\tif not f:\n\t\t\t\tfor c in w:\n\t\t\t\t\tfiltered_text.append(c)\n\t\t\t#otherwise animation of word\n\t\t\telse:\n\t\t\t\tfiltered_text.append(w)\n\t\twords = filtered_text;\n\t\treturn render(request,'animation.html',{'words':words,'text':text})",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\twords",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\twords = filtered_text;\n\t\treturn render(request,'animation.html',{'words':words,'text':text})\n\telse:\n\t\treturn render(request,'animation.html')\ndef signup_view(request):\n\tif request.method == 'POST':\n\t\tform = UserCreationForm(request.POST)\n\t\tif form.is_valid():\n\t\t\tuser = form.save()\n\t\t\tlogin(request,user)",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\tform",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\tform = UserCreationForm(request.POST)\n\t\tif form.is_valid():\n\t\t\tuser = form.save()\n\t\t\tlogin(request,user)\n\t\t\t# log the user in\n\t\t\treturn redirect('animation')\n\telse:\n\t\tform = UserCreationForm()\n\treturn render(request,'signup.html',{'form':form})\ndef login_view(request):",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tuser",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\t\tuser = form.save()\n\t\t\tlogin(request,user)\n\t\t\t# log the user in\n\t\t\treturn redirect('animation')\n\telse:\n\t\tform = UserCreationForm()\n\treturn render(request,'signup.html',{'form':form})\ndef login_view(request):\n\tif request.method == 'POST':\n\t\tform = AuthenticationForm(data=request.POST)",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\tform",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\tform = UserCreationForm()\n\treturn render(request,'signup.html',{'form':form})\ndef login_view(request):\n\tif request.method == 'POST':\n\t\tform = AuthenticationForm(data=request.POST)\n\t\tif form.is_valid():\n\t\t\t#log in user\n\t\t\tuser = form.get_user()\n\t\t\tlogin(request,user)\n\t\t\tif 'next' in request.POST:",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\tform",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\tform = AuthenticationForm(data=request.POST)\n\t\tif form.is_valid():\n\t\t\t#log in user\n\t\t\tuser = form.get_user()\n\t\t\tlogin(request,user)\n\t\t\tif 'next' in request.POST:\n\t\t\t\treturn redirect(request.POST.get('next'))\n\t\t\telse:\n\t\t\t\treturn redirect('animation')\n\telse:",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tuser",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\t\tuser = form.get_user()\n\t\t\tlogin(request,user)\n\t\t\tif 'next' in request.POST:\n\t\t\t\treturn redirect(request.POST.get('next'))\n\t\t\telse:\n\t\t\t\treturn redirect('animation')\n\telse:\n\t\tform = AuthenticationForm()\n\treturn render(request,'login.html',{'form':form})\ndef logout_view(request):",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "\t\tform",
        "kind": 5,
        "importPath": "A2SL.views",
        "description": "A2SL.views",
        "peekOfCode": "\t\tform = AuthenticationForm()\n\treturn render(request,'login.html',{'form':form})\ndef logout_view(request):\n\tlogout(request)\n\treturn redirect(\"home\")",
        "detail": "A2SL.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "A2SL.wsgi",
        "description": "A2SL.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "A2SL.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'A2SL.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc",
        "detail": "manage",
        "documentation": {}
    }
]